/* **DISCLAIMER**
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
* 1. the software will meet your requirements or expectations;
* 2. the software or the software content will be free of bugs, errors, viruses or other defects;
* 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
* 4. the software will be compatible with third party software;
* 5. any errors in the software will be corrected.
* The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
*/ 

def clientVersion() {
    return "1.3.1"
}

/*
* Garage Door Open and Close
*
* Copyright RBoy
* Redistribution of any changes or code is not allowed without permission
*
* Change Log
* 2016-8-17 - Added workaround for ST contact address book bug
* 2016-8-13 - Added support for sending SMS to multiple numbers by separating them with a +
* 2016-8-13 - Added support for contact address book from ST
* 2016-8-13 - Added support to turn on lights when someone arrives with option of doing it when it's dark outside
* 2016-2-14 - Only open/close doors if required and notify accordingly
* 2016-1-16 - Description correction
* 2016-1-16 - Added option to choose different garage doors/people for Open and Close actions
* 2016-1-15 - Added option for notitifications
* 2016-1-15 - Fix for missing handler
* 2015-10-26 - Fixed incorrect display text for arriving
* Updated 2015-2-2 - Initial release
*
*/
definition(
    name: "Garage Door Open and Close Automatically when People Arrive/Leave",
    namespace: "rboy",
    author: "RBoy",
    description: "Open a garage door when someone arrives, Close a garage door when someone leaves",
    category: "Convenience",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Meta/garage_contact.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Meta/garage_contact@2x.png")

preferences {
    page(name: "mainPage")
}

def mainPage() {
    dynamicPage(name: "mainPage", title: "Garage Door Open and Close Automatically when People Arrive/Leave v${clientVersion()}", install: true, uninstall: true) {    
        section("Open Garage Doors When People Arrive", hidden: false, hideable: true) {
            input "arrives", "capability.presenceSensor", title: "When one of these arrive", description: "Which people arrive?", multiple: true, required: false
            input "doorsOpen", "capability.doorControl", title: "Open these garage door(s)?", required: false, multiple: true
            input "arriveSwitches", "capability.switch", title: "...and turn on these switches", description: "Turn on lights", multiple: true, required: false, submitOnChange: true
            if (arriveSwitches) {
                input "arriveAfterDark", "bool", title: "...only if it's getting dark outside", description: "Turn on lights at night", required: false
            }
        }
        section("Close Garage Doors When People Leave", hidden: false, hideable: true) {
            input "leaves", "capability.presenceSensor", title: "When one of these leave", description: "Which people leave?", multiple: true, required: false
            input "doorsClose", "capability.doorControl", title: "Close these garage door(s)?", required: false, multiple: true
        }
        section("Notifications") {
            input("recipients", "contact", title: "Send notifications to (optional)", multiple: true, required: false) {
                paragraph "You can enter multiple phone numbers to send an SMS to by separating them with a '+'. E.g. 5551234567+4447654321"
                input "sms", "phone", title: "Send SMS to (phone number)", required: false
                input "push", "bool", title: "Send push notification", defaultValue: "true"
            }
        }
    }
}

def installed() {
    log.debug "Installed with settings: ${settings}"

    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"

    unsubscribe()
    initialize()
}

def initialize() {
    subscribe(arrives, "presence.present", arriveHandler)
    subscribe(leaves, "presence.not present", leaveHandler)
}

def arriveHandler(evt)
{
    log.debug "arriveHandler $evt.displayName, $evt.name: $evt.value"
    def msg = "$evt.displayName arrived"
    for(door in doorsOpen) {
        if (door.currentDoor == "closed") {
            msg += ", opening $door"
            door.open()
        } else {
            msg += ", $door already open"
        }
    }

    if (arriveAfterDark) {
        def cdt = new Date(now())
        def sunsetSunrise = getSunriseAndSunset(sunsetOffset: "-01:00") // Turn on 1 hour before sunset (dark)
        log.trace "Current DT: $cdt, Sunset $sunsetSunrise.sunset, Sunrise $sunsetSunrise.sunrise"
        if ((cdt >= sunsetSunrise.sunset) || (cdt <= sunsetSunrise.sunrise)) {
            arriveSwitches?.on() // Turn on switches after dark
            msg += ", turning on $arriveSwitches because it's getting dark outside"
        }
    } else {
        arriveSwitches?.on() // Turn on switches on arrival
        msg += ", turning on $arriveSwitches"
    }

    log.debug(msg)
    sendNotifications(msg)
}

def leaveHandler(evt)
{
    log.debug "leaveHandler $evt.displayName, $evt.name: $evt.value"
    def msg = "$evt.displayName left"
    for(door in doorsClose) {
        if (door.currentDoor == "open") {
            msg += ", closing $door"
            door.close()
        } else {
            msg += ", $door already closed"
        }
    }
    
    log.debug(msg)
    sendNotifications(msg)
}

private void sendText(number, message) {
    if (sms) {
        def phones = sms.split("\\+")
        for (phone in phones) {
            sendSms(phone, message)
        }
    }
}

private void sendNotifications(message) {
    if (location.contactBookEnabled) {
        sendNotificationToContacts(message, recipients)
    } else {
        if (push) {
            sendPush message
        } else {
            sendNotificationEvent(message)
        }
        if (sms) {
            sendText(sms, message)
        }
    }
}