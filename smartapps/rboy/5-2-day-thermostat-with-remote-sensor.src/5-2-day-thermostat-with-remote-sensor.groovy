/* **DISCLAIMER**
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
* 1. the software will meet your requirements or expectations;
* 2. the software or the software content will be free of bugs, errors, viruses or other defects;
* 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
* 4. the software will be compatible with third party software;
* 5. any errors in the software will be corrected.
* The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
*/ 

def clientVersion() {
    return "3.1.5"
}

/**
* 5-2 Day Thermostat with Remote Sensor
*
* Copyright RBoy, redistribution of code is not allowed without permission
*
* 2016-6-13 - Choosing thermostats is optional so that it can be temporatily disabled
* 2016-5-24 - Used new scheduling mechanisms since runOnce keeps getting dropped by the scheduler
* 2016-5-17 - Fix for potential app dying due to platform timeout
* 2016-5-15 - Notify use if timezone/location is missing in setup
* 2016-2-8 - Modes are now controlled by ST platform, app will only operate in designated modes (including turning off)
* 2016-2-7 - Set temp only if it needs to be changed to save thermostat battery
* 2016-1-28 - Added ability to rename app
* 2016-1-28 - Fixed an issue where the modes weren't functioning properly
* 2016-1-11 - Fixed a bug introduced with remote temperature sensors feature which caused any manual overrides on the thermostat to be overwritten by the app before the end of the current schedule
* 2016-1-4 - Added support for using a remote temperature sensor to control the thermostat
* 2016-1-4 - Added hideable sections to make it more readable
* 2016-1-4 - Added external events to kick start timers to compensate for buggy platform timers dying
* 2015-10-3 - Fixed an issue with selecting multiple thermostats and for recent platform changes
* 2015-5-17 - Added ability to select mutiple thermostats simultaneously
* 2015-2-11 - Fixed issue with fan mode
*
*/
definition(
    name: "5-2 Day Thermostat with Remote Sensor",
    namespace: "rboy",
    author: "RBoy",
    description: "Weekday and Weekend Thermostat with Remote Temperature Sensor Option",
    category: "Green Living",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving@3x.png")

preferences {
    page(name: "mainPage")
}

def mainPage() {
    dynamicPage(name: "mainPage", title: "5-2 Day Thermostat with Remote Sensor v${clientVersion()}", install: true, uninstall: true) {    
        TimeZone timeZone = location.timeZone
        if (!timeZone) {
            timeZone = TimeZone.getDefault()
            log.error "Hub location/timezone not set, using ${timeZone.getDisplayName()} timezone. Please set Hub location and timezone for the codes to work accurately"
            sendPush "Hub location/timezone not set, using ${timeZone.getDisplayName()} timezone. Please set Hub location and timezone for the codes to work accurately"
            section("INVALID HUB LOCATION") {
                paragraph "Hub location/timezone not set, using ${timeZone.getDisplayName()} timezone. Please set Hub location and timezone for the codes to work accurately"
            }
        }

        section("Choose thermostat(s)") {
            input "thermostats", "capability.thermostat", title: "Thermostat(s)", required: false, multiple:true
        }

        section("Use remote temperature sensor to control thermostat (optional)", hidden: (remoteTemperatureSensor ? false : true), hideable: true) {
            input "remoteTemperatureSensor", "capability.temperatureMeasurement", title: "Remote sensor", required: false, multiple:false
            input "threshold", "decimal", title: "Temperature swing (precision)", defaultValue: "1.0", required: true // , range: "0.5..5.0" causes Android 2.0.7 to crash, TODO: add this in later
        }

        section("Switch HVAC mode (auto to cool/heat) based on the outside temperature (optional)", hidden: (outsideTemperatureSensor ? false : true), hideable: true) {
            input "outsideTemperatureSensor", "capability.temperatureMeasurement", title: "Outside sensor", required: false, multiple:false
            input "temperatureH", "number", title: "Switch to heating temperature", required: false, description: "Temperature below which switch to heat mode"
            input "temperatureC", "number", title: "Switch to cooling temperature", required: false, description: "Temperature above which switch to cool mode"
        }

        section("Monday to Friday Schedule", hidden: false, hideable: true) {
            input "time1", "time", title: "Wake Time", required: true
            input "tempHSetpoint1", "number", title: "Wake Heat Temp", required: true
            input "tempCSetpoint1", "number", title: "Wake Cool Temp", required: true
            input "time2", "time", title: "Leave Time", required: true
            input "tempHSetpoint2", "number", title: "Leave Heat Temp", required: true
            input "tempCSetpoint2", "number", title: "Leave Cool Temp", required: true
            input "time3", "time", title: "Return Time", required: true
            input "tempHSetpoint3", "number", title: "Return Heat Temp", required: true
            input "tempCSetpoint3", "number", title: "Return Cool Temp", required: true
            input "time4", "time", title: "Sleep Time", required: true
            input "tempHSetpoint4", "number", title: "Sleep Heat Temp", required: true
            input "tempCSetpoint4", "number", title: "Sleep Cool Temp", required: true
        }
        section("Saturday and Sunday Schedule", hidden: false, hideable: true) {
            input "time11", "time", title: "Wake Time", required: true
            input "tempHSetpoint11", "number", title: "Wake Heat Temp", required: true
            input "tempCSetpoint11", "number", title: "Wake Cool Temp", required: true
            input "time21", "time", title: "Leave Time", required: true
            input "tempHSetpoint12", "number", title: "Leave Heat Temp", required: true
            input "tempCSetpoint12", "number", title: "Leave Cool Temp", required: true
            input "time31", "time", title: "Return Time", required: true
            input "tempHSetpoint13", "number", title: "Return Heat Temp", required: true
            input "tempCSetpoint13", "number", title: "Return Cool Temp", required: true
            input "time41", "time", title: "Sleep Time", required: true
            input "tempHSetpoint14", "number", title: "Sleep Heat Temp", required: true
            input "tempCSetpoint14", "number", title: "Sleep Cool Temp", required: true
        }
        section("Thermostat Operating Modes (optional)") {
            mode title: "Enable thermostat only when in this mode(s)", required: false, multiple: true
        }
        section("Change Name of App (optional)") {
            label title: "Assign a name", required: false
        }
    }
}

def installed()
{
    log.debug "Installed"

    subscribeToEvents()
}

def updated()
{
    log.debug "Updated"

    unsubscribe()
    unschedule()
    subscribeToEvents()
}

def subscribeToEvents() {
    subscribe(location, "mode", modeChangeHandler) // Reinitailize the temperature and timers when the correct mode is enabled (since we don't use dynamic preferences, the timers won't fire and temp won't change in a mode not selected, so we need to reset it all on the correct mode)
    subscribe(remoteTemperatureSensor, "temperature", remoteChangeHandler) // Handle changes in remote temperature sensor and readjust thermostat AND also kick start timer (dual role)
    subscribe(outsideTemperatureSensor, "temperature", outsideTemperatureHandler) // Handle changes to thermostat operating mode based on external temperature

    // Kick start timers incase it died
    /*subscribe(location, "position", kickStartTimers)
    subscribe(location, "sunset", kickStartTimers)
    subscribe(location, "sunrise", kickStartTimers)
    subscribe(location, "routineExecuted", kickStartTimers)
    subscribe(thermostats, "temperature", kickStartTimers)*/
    runEvery5Minutes(heartBeat) // Since we have a heartbeat we don't need kick start timers

    initialize()
}

// Heartbeat to check if the app timed out while trying to set the temp and died
def heartBeat() {
    log.trace "Thermostat heartbeat called, checking if the last temperature change was successfully completed"
    if (!state.tempSetSuccess) {
        log.warn "Last temperature change was NOT successful, reinitializing thermostat"
        initialize(true) // Set the temperature since we had a failure to set the temp the last time it was programmed
    }
}

// Reinitialize timers only (don't set temperature otherwise you may end up overriding manual adjustments)
def kickStartTimers(evt) {
    log.debug "Reinitializing thermostat timer on event notification, name: ${evt?.name}, value: ${evt?.value}, Description: ${evt?.descriptionText}"
    initialize(state.tempSetSuccess == null ? true : !state.tempSetSuccess) // Only kick start timers, set the temperature only if we had a failure to set the temp the last time it was programmed
}

// Reinitialize the current temperature and timers after a mode change, this is to workaround the issue of the last timer firing while in a non running mode, resume operations when supported modes are set
def modeChangeHandler(evt) {
    log.debug "Reinitializing thermostats on mode change notification, name: ${evt.name}, value: ${evt.value}"

    initialize()
}

// Handle remote temp sensor, kick start timer and set temperature if using a remote sensor
def remoteChangeHandler(evt) {
    log.debug "Reinitializing thermostats on remote sensor temp change notification, name: ${evt.name}, value: ${evt.value}"
    initialize()
}

// This section sets the HVAC mode based outside temperature. HVAC fan mode is set to "auto".
def outsideTemperatureHandler(evt) {
    log.debug "Heat mode switch temperature $temperatureH, cool mode switch temperature $temperatureC"

    if (temperatureH == null || temperatureC == null) { // We are in Auto mode or user doesn't want us to switch modes
        return
    }

    thermostats.each { thermostat ->
        def extTemp = outsideTemperatureSensor.currentTemperature
        log.debug "External temperature is: $extTemp"
        def thermostatState = thermostat.currentThermostatMode
        def thermostatFan = thermostat.currentThermostatFanMode
        log.debug "HVAC current mode $thermostatState"
        log.debug "HVAC Fan current mode $thermostatFan"
        if (extTemp < temperatureH) {
            if (thermostatState == "cool") {
                def hvacmode = "heat"
                thermostat.setThermostatMode(hvacmode)
                log.debug "HVAC mode set to $hvacmode"
            }
        }
        else if (extTemp > temperatureC) {
            if (thermostatState == "heat") {
                def hvacmode = "cool"
                thermostat.setThermostatMode(hvacmode)
                log.debug "HVAC mode set to $hvacmode"
            }
        }

        if (thermostatFan != "fanAuto") {
            thermostat.setThermostatFanMode("auto")
            log.debug "HVAC fan mode set to auto"
        }
    }
}

// This function set the temperature and schedules the next change (if setTemp is false then it just sets the next schedule, i.e. kickStart timer)
def initialize(def setTemp = true) { // By default we change the temp and set the timer
    log.trace "Initialized with $settings"
    log.trace "Request to set temperature = $setTemp"

    state.tempSetSuccess = false // Set the baseline and check if we finish

    TimeZone timeZone = location.timeZone
    if (!timeZone) {
        timeZone = TimeZone.getDefault()
        log.error "Hub timeZone not set, using ${timeZone.getDisplayName()} timezone. Please set Hub location and timezone for the codes to work accurately"
        sendPush "Hub timeZone not set, using ${timeZone.getDisplayName()} timezone. Please set Hub location and timezone for the codes to work accurately"
    }

    def calendar = Calendar.getInstance()
    calendar.setTimeZone(timeZone)
    def today = calendar.get(Calendar.DAY_OF_WEEK)
    def timeNow = now() + 60*1000 // Give it a buffer of 60 seconds ahead since the new Ticker scheduler randomizes the times slightly and just in case we get called earlier then scheduled time as it won't run again
    def midnightToday = timeToday("2000-01-01T23:59:59.999-0000", timeZone)
    log.trace("Current time is ${(new Date(timeNow)).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
    log.trace("Midnight today is ${midnightToday.format("EEE MMM dd yyyy HH:mm z", timeZone)}")
    log.trace("Weekday schedule1 ${timeToday(time1, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekday schedule2 ${timeToday(time2, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekday schedule3 ${timeToday(time3, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekday schedule4 ${timeToday(time4, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekend schedule1 ${timeToday(time11, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekend schedule2 ${timeToday(time21, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekend schedule3 ${timeToday(time31, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekend schedule4 ${timeToday(time41, timeZone).format("HH:mm z", timeZone)}")

    // This section is where the time/temperature schedule is set
    switch (today) {
        case Calendar.MONDAY:
        case Calendar.TUESDAY:
        case Calendar.WEDNESDAY:
        case Calendar.THURSDAY:
        if (timeNow >= timeToday(time1, timeZone).time && timeNow < timeToday(time2, timeZone).time) { // Are we between 1st time and 2nd time
            nextRun(timeToday(time2, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time2, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time2, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(1)
        }
        else if (timeNow >= timeToday(time2, timeZone).time && timeNow < timeToday(time3, timeZone).time) { // Are we between 2nd time and 3rd time
            nextRun(timeToday(time3, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time3, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time3, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(2)
        }
        else if (timeNow >= timeToday(time3, timeZone).time && timeNow < timeToday(time4, timeZone).time) { // Are we between 3rd time and 4th time
            nextRun(timeToday(time4, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time4, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time4, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(3)
        }
        else if (timeNow >= timeToday(time4, timeZone).time && timeNow < midnightToday.time) { // Are we between 4th time and midnight, schedule next day
            nextRun(timeToday(time1, timeZone) + 1, initialize)
            log.info("$thermostats Scheduled next adjustment for ${(timeToday(time1, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${(timeToday(time1, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(4)
        }
        else if (timeNow >= (midnightToday - 1).time && timeNow < timeToday(time1, timeZone).time) { // Are we between midnight yesterday and 1st time, schedule today
            nextRun(timeToday(time1, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time1, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time1, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(4)
        }
        break

        case Calendar.FRIDAY:
        if (timeNow >= timeToday(time1, timeZone).time && timeNow < timeToday(time2, timeZone).time) { // Are we between 1st time and 2nd time
            nextRun(timeToday(time2, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time2, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time2, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(1)
        }
        else if (timeNow >= timeToday(time2, timeZone).time && timeNow < timeToday(time3, timeZone).time) { // Are we between 2nd time and 3rd time
            nextRun(timeToday(time3, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time3, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time3, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(2)
        }
        else if (timeNow >= timeToday(time3, timeZone).time && timeNow < timeToday(time4, timeZone).time) { // Are we between 3rd time and 4th time
            nextRun(timeToday(time4, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time4, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time4, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(3)
        }
        else if (timeNow >= timeToday(time4, timeZone).time && timeNow < midnightToday.time) { // Are we between 4th time Friday and midnight, we schedule Saturday
            nextRun(timeToday(time11, timeZone) + 1, initialize)
            log.info("$thermostats Scheduled next adjustment for ${(timeToday(time11, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${(timeToday(time11, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(4)
        }
        else if (timeNow >= (midnightToday - 1).time && timeNow < timeToday(time11, timeZone).time) { // Are we between midnight Friday and 1st time on Saturday, we schedule Saturday
            nextRun(timeToday(time11, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time11, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time11, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(4)
        }
        break

        case Calendar.SATURDAY:
        if (timeNow >= timeToday(time11, timeZone).time && timeNow < timeToday(time21, timeZone).time) { // Are we between 1st time and 2nd time
            nextRun(timeToday(time21, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time21, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time21, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(11)
        }
        else if (timeNow >= timeToday(time21, timeZone).time && timeNow < timeToday(time31, timeZone).time) { // Are we between 2nd time and 3rd time
            nextRun(timeToday(time31, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time31, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time31, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(12)
        }
        else if (timeNow >= timeToday(time31, timeZone).time && timeNow < timeToday(time41, timeZone).time) { // Are we between 3rd time and 4th time
            nextRun(timeToday(time41, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time41, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time41, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(13)
        }
        else if (timeNow >= timeToday(time41, timeZone).time && timeNow < midnightToday.time) { // Are we between 4th time and midnight, schedule the next day
            nextRun(timeToday(time11, timeZone) + 1, initialize)
            log.info("$thermostats Scheduled next adjustment for ${(timeToday(time11, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${(timeToday(time11, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(14)
        }
        else if (timeNow >= (midnightToday - 1).time && timeNow < timeToday(time11, timeZone).time) { // Are we between midnight yesterday and 1st time, schedule today
            nextRun(timeToday(time11, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time11, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time11, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(14)
        }
        break

        case Calendar.SUNDAY:
        if (timeNow >= timeToday(time11, timeZone).time && timeNow < timeToday(time21, timeZone).time) { // Are we between 1st time and 2nd time
            nextRun(timeToday(time21, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time21, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time21, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(11)
        }
        else if (timeNow >= timeToday(time21, timeZone).time && timeNow < timeToday(time31, timeZone).time) { // Are we between 2nd time and 3rd time
            nextRun(timeToday(time31, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time31, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time31, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(12)
        }
        else if (timeNow >= timeToday(time31, timeZone).time && timeNow < timeToday(time41, timeZone).time) { // Are we between 3rd time and 4th time
            nextRun(timeToday(time41, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time41, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time41, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(13)
        }
        else if (timeNow >= timeToday(time41, timeZone).time && timeNow < midnightToday.time) { // Are we between 4th time Sunday and midnight, we schedule Monday
            nextRun(timeToday(time1, timeZone) + 1, initialize)
            log.info("$thermostats Scheduled next adjustment for ${(timeToday(time1, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${(timeToday(time1, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(14)
        }
        else if (timeNow >= (midnightToday - 1).time && timeNow < timeToday(time1, timeZone).time) { // Are we between midnight Sunday and 1st time on Monday, we schedule Monday
            nextRun(timeToday(time1, timeZone), initialize)
            log.info("$thermostats Scheduled next adjustment for ${timeToday(time1, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            //sendNotificationEvent("$thermostats Scheduled next adjustment for ${timeToday(time1, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
            if(setTemp) changeTemp(14)
        }
        break
    }
    state.tempSetSuccess = true // We are done here!
}

// This section is where the thermostat temperature settings are set. 
private void changeTemp(sch) {
    thermostats.each { thermostat ->
        def coolingSetpoint = settings."tempCSetpoint${sch}"
        def heatingSetpoint = settings."tempHSetpoint${sch}"
        def thermostatState = thermostat.currentThermostatMode

        log.trace "Thermostat mode: $thermostatState, Target Heat: $heatingSetpoint°, Target Cool: $coolingSetpoint°"

        // Check for invalid configuration
        if ((thermostatState == "auto") && (heatingSetpoint > coolingSetpoint)) {
            log.error "INVALID CONFIGURATION: Target Heat temperature: $heatingSetpoint° is GREATER than Target Cool temperature: $coolingSetpoint°"
            log.error "Not changing temperature settings on thermostat, correct the SmartApp settings"
            return
        }

        if (remoteTemperatureSensor) { // Remote temperature sensor
            def locationScale = getTemperatureScale()
            def maxTemp
            def minTemp
            if (locationScale == "C") {
                minTemp = 10 // minimum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to minimum)
                maxTemp = 32 // maximum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to maximum)
                log.trace "Location is in Celsius, MaxTemp $maxTemp, MinTemp $minTemp for thermostat"
            } else {
                minTemp = 50 // minimum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to minimum)
                maxTemp = 90 // maximum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to maximum)
                log.trace "Location is in Farenheit, MaxTemp $maxTemp, MinTemp $minTemp for thermostat"
            }

            def currentTemp = remoteTemperatureSensor.currentTemperature
            log.trace("Remote Sensor Current Temp: $currentTemp°, Swing Threshold: $threshold")

            if (thermostatState == "auto") {
                // Cooling first
                if ((currentTemp - coolingSetpoint) >= threshold) { // Turn cool on
                    if (thermostat.currentValue("coolingSetpoint") != minTemp) {
                        thermostat.setCoolingSetpoint(minTemp) // Set to cool
                    }
                    if (thermostat.currentValue("heatingSetpoint") != minTemp) {
                        thermostat.setHeatingSetpoint(minTemp) // Disable heat
                    }
                    log.info "Cooling ON, Thermostat Cool: ${minTemp}, Target: $coolingSetpoint°"
                } else if ((heatingSetpoint - currentTemp) >= threshold) { // Heating second (order if important to avoid constant switching)
                    if (thermostat.currentValue("heatingSetpoint") != maxTemp) {
                        thermostat.setHeatingSetpoint(maxTemp) // Set to heat
                    }
                    if (thermostat.currentValue("coolingSetpoint") != maxTemp) {
                        thermostat.setCoolingSetpoint(maxTemp) // Disable cool
                    }
                    log.info "Heating ON, Thermostat Heat: ${maxTemp}, Target: $heatingSetpoint°"
                } else if (((coolingSetpoint - currentTemp) >= threshold) || ((currentTemp - heatingSetpoint) >= threshold)) { // Turn off - don't check valid mode
                    if (thermostat.currentValue("coolingSetpoint") != maxTemp) {
                        thermostat.setCoolingSetpoint(maxTemp) // Disable cool
                    }
                    if (thermostat.currentValue("heatingSetpoint") != minTemp) {
                        thermostat.setHeatingSetpoint(minTemp) // Disable heat
                    }
                    log.info "HVAC OFF, Thermostat Cool: ${maxTemp}, Thermostat Heat: ${minTemp}"
                }
            } else if (thermostatState == "cool") {
                // air conditioner
                if ((currentTemp - coolingSetpoint) >= threshold) { // Turn cool on
                    if (thermostat.currentValue("coolingSetpoint") != minTemp) {
                        thermostat.setCoolingSetpoint(minTemp) // Set to cool
                    }
                    log.info "Cooling ON, Thermostat: ${minTemp}, Target: $coolingSetpoint°"
                } else if ((coolingSetpoint - currentTemp) >= threshold) { // Turn cool off - don't check valid mode
                    if (thermostat.currentValue("coolingSetpoint") != maxTemp) {
                        thermostat.setCoolingSetpoint(maxTemp) // Disable
                    }
                    log.info "Cooling OFF, Thermostat Cool: ${maxTemp}"
                }
            } else {
                // Heater or emergency heater
                if ((heatingSetpoint - currentTemp) >= threshold) {
                    if (thermostat.currentValue("heatingSetpoint") != maxTemp) {
                        thermostat.setHeatingSetpoint(maxTemp) // Set to heat
                    }
                    log.info "Heating ON, Thermostat: ${maxTemp}, Target: $heatingSetpoint°"
                } else if ((currentTemp - heatingSetpoint) >= threshold) {
                    if (thermostat.currentValue("heatingSetpoint") != minTemp) {
                        thermostat.setHeatingSetpoint(minTemp) // Disable - don't check valid mode
                    }
                    log.info "Heating OFF, Thermostat Heat: ${minTemp}"
                }
            }
        } else { // Local thermostat
            if (thermostatState == "auto") {
                thermostat.setHeatingSetpoint(heatingSetpoint)
                thermostat.setCoolingSetpoint(coolingSetpoint)
                log.info "Set $thermostat Heat ${heatingSetpoint}°, Cool ${coolingSetpoint}°"
            } else if (thermostatState == "cool") {
                thermostat.setCoolingSetpoint(coolingSetpoint)
                log.info "Set $thermostat Cool ${coolingSetpoint}°"
            } else { // heater or emergency heater
                thermostat.setHeatingSetpoint(heatingSetpoint)
                log.info "Set $thermostat Heat ${heatingSetpoint}°"
            }
        }
    }
}

private nextRun(dateTime, handler) {
    schedule(dateTime, handler) // Use schedule instead of runOnce since the scheduler sometimes drops runOnce and wont' pick it up, schedule will be picked up again
}